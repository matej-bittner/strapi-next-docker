version: "3"
services:
  next:
    build:
      context: ./frontend
      dockerfile: frontend.prod.dockerfile
    restart: unless-stopped
    depends_on:
      strapi:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://next:3000"]
      interval: 30s
      timeout: 10s
      retries: 5

  strapi:
    build:
      context: ./backend
      dockerfile: backend.prod.dockerfile
    restart: unless-stopped
    environment:
      DATABASE_CLIENT: ${DATABASE_CLIENT}
      DATABASE_HOST: postgresDB
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PORT: ${DATABASE_PORT}
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      APP_KEYS: ${APP_KEYS}
      API_TOKEN_SALT: ${API_TOKEN_SALT}
      NODE_ENV: ${NODE_ENV}
      TRANSFER_TOKEN_SALT: ${TRANSFER_TOKEN_SALT}
    depends_on:
      postgresDB:
        condition: service_healthy
    volumes:
      - strapiconfig:/opt/app/config
      - strapiuploads:/opt/app/public/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://strapi:1337/admin"]
      interval: 30s
      timeout: 10s
      retries: 5

  postgresDB:
    platform: linux/amd64
    restart: unless-stopped
    image: postgres:14.5-alpine
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - strapidb:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME}"]
      interval: 15s
      timeout: 5s
      retries: 5

volumes:
  strapiconfig:
  strapidb:
  strapiuploads:
